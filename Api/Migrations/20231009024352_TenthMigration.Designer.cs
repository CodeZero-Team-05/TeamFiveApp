// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamFive.DataStorage;

#nullable disable

namespace TeamFive.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20231009024352_TenthMigration")]
    partial class TenthMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyApp.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TeamFive.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AcceptingNewStudents")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InstructorAboutMe")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("WillingToTravel")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AcceptingNewStudents = true,
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(1893),
                            InstructorAboutMe = "Best Floutist on the web",
                            Location = "Online",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(1899),
                            WillingToTravel = false,
                            YearsExperience = 3
                        },
                        new
                        {
                            Id = 4,
                            AcceptingNewStudents = false,
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(1904),
                            InstructorAboutMe = "Teaching Guitar up and down the Coast.",
                            Location = "Sacremento, CA",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(1905),
                            WillingToTravel = true,
                            YearsExperience = 10
                        },
                        new
                        {
                            Id = 5,
                            AcceptingNewStudents = true,
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(1906),
                            InstructorAboutMe = "When the student is ready, the teacher will appear.",
                            Location = "Hidden Cave, Sacred Mountains",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(1907),
                            WillingToTravel = false,
                            YearsExperience = 100
                        });
                });

            modelBuilder.Entity("TeamFive.Models.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Instruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "String Instruments",
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 190, DateTimeKind.Utc).AddTicks(2407),
                            InstrumentName = "Cello",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 190, DateTimeKind.Utc).AddTicks(2410)
                        },
                        new
                        {
                            Id = 2,
                            Category = "String Instruments",
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 190, DateTimeKind.Utc).AddTicks(2605),
                            InstrumentName = "Electric Guitar",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 190, DateTimeKind.Utc).AddTicks(2606)
                        },
                        new
                        {
                            Id = 3,
                            Category = "String Instruments",
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 190, DateTimeKind.Utc).AddTicks(2622),
                            InstrumentName = "Violin",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 190, DateTimeKind.Utc).AddTicks(2622)
                        },
                        new
                        {
                            Id = 4,
                            Category = "Woodwind Instruments",
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 190, DateTimeKind.Utc).AddTicks(2640),
                            InstrumentName = "Flute",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 190, DateTimeKind.Utc).AddTicks(2640)
                        },
                        new
                        {
                            Id = 5,
                            Category = "Woodwind Instruments",
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 190, DateTimeKind.Utc).AddTicks(2669),
                            InstrumentName = "Clarinet",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 190, DateTimeKind.Utc).AddTicks(2669)
                        },
                        new
                        {
                            Id = 6,
                            Category = "Woodwind Instruments",
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 190, DateTimeKind.Utc).AddTicks(2694),
                            InstrumentName = "Saxophone",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 190, DateTimeKind.Utc).AddTicks(2694)
                        });
                });

            modelBuilder.Entity("TeamFive.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LessonTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("OnlineAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PricePerLesson")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LessonTypeId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(2009),
                            Description = "First Lesson: $50 per lesson",
                            InstructorId = 3,
                            LessonName = "Beginner Guitar",
                            LessonTypeId = 1,
                            OnlineAvailable = true,
                            PricePerLesson = 50,
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(2010)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(2015),
                            Description = "Second Lesson: $100 per lesson",
                            InstructorId = 3,
                            LessonName = "Intermediate Electric Guitar",
                            LessonTypeId = 2,
                            OnlineAvailable = false,
                            PricePerLesson = 100,
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(2015)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(2018),
                            Description = "Third Lesson: $150 per lesson",
                            InstructorId = 4,
                            LessonName = "Beginner Violin",
                            LessonTypeId = 3,
                            OnlineAvailable = true,
                            PricePerLesson = 150,
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(2018)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(2022),
                            Description = "Fourth Lesson: $200 per lesson",
                            InstructorId = 4,
                            LessonName = "Expert Flute",
                            LessonTypeId = 4,
                            OnlineAvailable = false,
                            PricePerLesson = 200,
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(2023)
                        });
                });

            modelBuilder.Entity("TeamFive.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 196, DateTimeKind.Utc).AddTicks(3914),
                            Email = "a@email.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "AQAAAAIAAYagAAAAEMaYrXu1f2MxC/lMqoNGyp/lMFSeZebjwmWrQu8cSgXuvjU2/BkUQdb/OPzTv54eJA==",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 196, DateTimeKind.Utc).AddTicks(3919)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 275, DateTimeKind.Utc).AddTicks(9139),
                            Email = "b@email.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "AQAAAAIAAYagAAAAECkYi9GB8v3iDSO/nWrS6ac2sIQJKIFi6lsp4dvyPoBT9KYgs27yC4oAtwDey3VozQ==",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 275, DateTimeKind.Utc).AddTicks(9144)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 354, DateTimeKind.Utc).AddTicks(4459),
                            Email = "c@email.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Password = "AQAAAAIAAYagAAAAEDQs80/rdp6sgvzDWLE4PqcHmDPHvrFNhQVNLiJ489EzOE6zJzxjhuf6BSRmEwvYzw==",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 354, DateTimeKind.Utc).AddTicks(4464)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 435, DateTimeKind.Utc).AddTicks(8328),
                            Email = "d@email.com",
                            FirstName = "Bob",
                            LastName = "Williams",
                            Password = "AQAAAAIAAYagAAAAEPKoJNR8T5r+QrvjEzrEF+TITQb3GD2zkphOeTryk7vxXZiK77oXDCNNTG67Ms3Ngg==",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 435, DateTimeKind.Utc).AddTicks(8333)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 515, DateTimeKind.Utc).AddTicks(1831),
                            Email = "e@email.com",
                            FirstName = "Eve",
                            LastName = "Davis",
                            Password = "AQAAAAIAAYagAAAAEPvvvrdv6yz4Kk17kriY68i9eckLTqD03x+QEVGCs6y+tHILmRpTDHXA6t4Cc8vKfQ==",
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 515, DateTimeKind.Utc).AddTicks(1836)
                        });
                });

            modelBuilder.Entity("TeamFive.Models.UserLessonBooking", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BookingNotes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("UserLessonBookings");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            LessonId = 1,
                            BookingDate = new DateTime(2023, 10, 8, 19, 43, 52, 630, DateTimeKind.Local).AddTicks(2172),
                            BookingNotes = "Notes for the first Booking",
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(2160),
                            Id = 1,
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(2161)
                        },
                        new
                        {
                            UserId = 2,
                            LessonId = 3,
                            BookingDate = new DateTime(2023, 10, 8, 19, 43, 52, 630, DateTimeKind.Local).AddTicks(2249),
                            BookingNotes = "Notes for the second Booking",
                            CreatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(2247),
                            Id = 2,
                            UpdatedAt = new DateTime(2023, 10, 9, 2, 43, 52, 630, DateTimeKind.Utc).AddTicks(2248)
                        });
                });

            modelBuilder.Entity("MyApp.Models.RefreshToken", b =>
                {
                    b.HasOne("TeamFive.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamFive.Models.Lesson", b =>
                {
                    b.HasOne("TeamFive.Models.Instructor", "LessonInstructor")
                        .WithMany("LessonCatalogue")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamFive.Models.Instrument", "LessonType")
                        .WithMany()
                        .HasForeignKey("LessonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonInstructor");

                    b.Navigation("LessonType");
                });

            modelBuilder.Entity("TeamFive.Models.UserLessonBooking", b =>
                {
                    b.HasOne("TeamFive.Models.Lesson", "BookingLesson")
                        .WithMany("BookedUser")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamFive.Models.User", "BookingUser")
                        .WithMany("BookedLessons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingLesson");

                    b.Navigation("BookingUser");
                });

            modelBuilder.Entity("TeamFive.Models.Instructor", b =>
                {
                    b.Navigation("LessonCatalogue");
                });

            modelBuilder.Entity("TeamFive.Models.Lesson", b =>
                {
                    b.Navigation("BookedUser");
                });

            modelBuilder.Entity("TeamFive.Models.User", b =>
                {
                    b.Navigation("BookedLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
