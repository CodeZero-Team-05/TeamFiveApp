// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamFive.DataStorage;

#nullable disable

namespace TeamFive.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20231008054858_SixthMigration")]
    partial class SixthMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyApp.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TeamFive.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AcceptingNewStudents")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InstructorAboutMe")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("WillingToTravel")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("TeamFive.Models.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Instruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "String Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 701, DateTimeKind.Utc).AddTicks(3143),
                            InstrumentName = "Acoustic Guitar",
                            UpdatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 701, DateTimeKind.Utc).AddTicks(3148)
                        },
                        new
                        {
                            Id = 2,
                            Category = "String Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 701, DateTimeKind.Utc).AddTicks(3307),
                            InstrumentName = "Electric Guitar",
                            UpdatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 701, DateTimeKind.Utc).AddTicks(3307)
                        },
                        new
                        {
                            Id = 3,
                            Category = "String Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 701, DateTimeKind.Utc).AddTicks(3324),
                            InstrumentName = "Violin",
                            UpdatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 701, DateTimeKind.Utc).AddTicks(3324)
                        },
                        new
                        {
                            Id = 4,
                            Category = "Woodwind Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 701, DateTimeKind.Utc).AddTicks(3338),
                            InstrumentName = "Flute",
                            UpdatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 701, DateTimeKind.Utc).AddTicks(3338)
                        },
                        new
                        {
                            Id = 5,
                            Category = "Woodwind Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 701, DateTimeKind.Utc).AddTicks(3368),
                            InstrumentName = "Clarinet",
                            UpdatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 701, DateTimeKind.Utc).AddTicks(3368)
                        },
                        new
                        {
                            Id = 6,
                            Category = "Woodwind Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 701, DateTimeKind.Utc).AddTicks(3387),
                            InstrumentName = "Saxophone",
                            UpdatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 701, DateTimeKind.Utc).AddTicks(3387)
                        });
                });

            modelBuilder.Entity("TeamFive.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("LessonTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("OnlineAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PricePerLesson")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LessonTypeId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("TeamFive.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("WillingToTravel")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 8, 5, 48, 58, 169, DateTimeKind.Utc).AddTicks(7425),
                            Description = "The First Student in Instrumental",
                            FirstName = "John",
                            LastName = "Doe",
                            Location = "Online",
                            UpdatedAt = new DateTime(2023, 10, 8, 5, 48, 58, 169, DateTimeKind.Utc).AddTicks(7429),
                            WillingToTravel = false
                        });
                });

            modelBuilder.Entity("TeamFive.Models.StudentLessonBooking", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BookingNotes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LessonNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StudentId", "LessonId");

                    b.HasIndex("LessonId");

                    b.HasIndex("LessonNameId");

                    b.ToTable("StudentLessonBookings");
                });

            modelBuilder.Entity("TeamFive.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 707, DateTimeKind.Utc).AddTicks(106),
                            Email = "a@email.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "AQAAAAIAAYagAAAAEHeQAaFRuqK3oiWsBK9Hk2qkhIyBwF9sHX3p2XUJMLJdZ7bQYOmzjpI0DxwQucXaoQ==",
                            UpdatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 707, DateTimeKind.Utc).AddTicks(109)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 791, DateTimeKind.Utc).AddTicks(9850),
                            Email = "b@email.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "AQAAAAIAAYagAAAAEDn3pvA2ud2i32Y2CW+bIZLA0Vl18MMPuxKtPfDUQDRVO/BcnztKWftFcVY7LQFNsw==",
                            UpdatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 791, DateTimeKind.Utc).AddTicks(9854)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 883, DateTimeKind.Utc).AddTicks(4716),
                            Email = "c@email.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Password = "AQAAAAIAAYagAAAAEJShwNjV+Igzwlv8h7NbUJ5S84Njmn/dg8Lbbh0TQw5XMlaF/Sg/lfPQ70FQogbwxA==",
                            UpdatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 883, DateTimeKind.Utc).AddTicks(4722)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 962, DateTimeKind.Utc).AddTicks(5509),
                            Email = "d@email.com",
                            FirstName = "Bob",
                            LastName = "Williams",
                            Password = "AQAAAAIAAYagAAAAEPeKQJNzts/+yGFViCZbwMKJkefUnyIgaAbdiPiCqnWC9t8mYRmYML1LnRVhW7OB0A==",
                            UpdatedAt = new DateTime(2023, 10, 8, 5, 48, 57, 962, DateTimeKind.Utc).AddTicks(5513)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 10, 8, 5, 48, 58, 51, DateTimeKind.Utc).AddTicks(7951),
                            Email = "e@email.com",
                            FirstName = "Eve",
                            LastName = "Davis",
                            Password = "AQAAAAIAAYagAAAAEL/XtRfSZlOcE3EpDDQ1ssLlWeM4EOznOw5G7Ipk3xH9Wny4HpN0CnncmdHdnJMtLA==",
                            UpdatedAt = new DateTime(2023, 10, 8, 5, 48, 58, 51, DateTimeKind.Utc).AddTicks(7955)
                        });
                });

            modelBuilder.Entity("MyApp.Models.RefreshToken", b =>
                {
                    b.HasOne("TeamFive.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamFive.Models.Lesson", b =>
                {
                    b.HasOne("TeamFive.Models.Instructor", "LessonInstructor")
                        .WithMany("LessonCatalogue")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamFive.Models.Instrument", "LessonType")
                        .WithMany()
                        .HasForeignKey("LessonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonInstructor");

                    b.Navigation("LessonType");
                });

            modelBuilder.Entity("TeamFive.Models.StudentLessonBooking", b =>
                {
                    b.HasOne("TeamFive.Models.Lesson", "BookingLesson")
                        .WithMany("BookedStudents")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamFive.Models.Lesson", "LessonName")
                        .WithMany()
                        .HasForeignKey("LessonNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamFive.Models.Student", "BookingStudent")
                        .WithMany("BookedLessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingLesson");

                    b.Navigation("BookingStudent");

                    b.Navigation("LessonName");
                });

            modelBuilder.Entity("TeamFive.Models.Instructor", b =>
                {
                    b.Navigation("LessonCatalogue");
                });

            modelBuilder.Entity("TeamFive.Models.Lesson", b =>
                {
                    b.Navigation("BookedStudents");
                });

            modelBuilder.Entity("TeamFive.Models.Student", b =>
                {
                    b.Navigation("BookedLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
