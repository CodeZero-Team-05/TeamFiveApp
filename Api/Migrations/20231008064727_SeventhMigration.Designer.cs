// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamFive.DataStorage;

#nullable disable

namespace TeamFive.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20231008064727_SeventhMigration")]
    partial class SeventhMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyApp.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TeamFive.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AcceptingNewStudents")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InstructorAboutMe")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("WillingToTravel")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AcceptingNewStudents = true,
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 332, DateTimeKind.Utc).AddTicks(4205),
                            InstructorAboutMe = "Best Floutist on the web",
                            Location = "Online",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 332, DateTimeKind.Utc).AddTicks(4205),
                            WillingToTravel = false,
                            YearsExperience = 3
                        },
                        new
                        {
                            Id = 4,
                            AcceptingNewStudents = false,
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 332, DateTimeKind.Utc).AddTicks(4212),
                            InstructorAboutMe = "Teaching Guitar up and down the Coast.",
                            Location = "Sacremento, CA",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 332, DateTimeKind.Utc).AddTicks(4212),
                            WillingToTravel = true,
                            YearsExperience = 10
                        },
                        new
                        {
                            Id = 5,
                            AcceptingNewStudents = true,
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 332, DateTimeKind.Utc).AddTicks(4214),
                            InstructorAboutMe = "When the student is ready, the teacher will appear.",
                            Location = "Hidden Cave, Sacred Mountains",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 332, DateTimeKind.Utc).AddTicks(4214),
                            WillingToTravel = false,
                            YearsExperience = 100
                        });
                });

            modelBuilder.Entity("TeamFive.Models.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Instruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "String Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 882, DateTimeKind.Utc).AddTicks(4242),
                            InstrumentName = "Acoustic Guitar",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 882, DateTimeKind.Utc).AddTicks(4245)
                        },
                        new
                        {
                            Id = 2,
                            Category = "String Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 882, DateTimeKind.Utc).AddTicks(4456),
                            InstrumentName = "Electric Guitar",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 882, DateTimeKind.Utc).AddTicks(4457)
                        },
                        new
                        {
                            Id = 3,
                            Category = "String Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 882, DateTimeKind.Utc).AddTicks(4493),
                            InstrumentName = "Violin",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 882, DateTimeKind.Utc).AddTicks(4493)
                        },
                        new
                        {
                            Id = 4,
                            Category = "Woodwind Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 882, DateTimeKind.Utc).AddTicks(4520),
                            InstrumentName = "Flute",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 882, DateTimeKind.Utc).AddTicks(4520)
                        },
                        new
                        {
                            Id = 5,
                            Category = "Woodwind Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 882, DateTimeKind.Utc).AddTicks(4563),
                            InstrumentName = "Clarinet",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 882, DateTimeKind.Utc).AddTicks(4563)
                        },
                        new
                        {
                            Id = 6,
                            Category = "Woodwind Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 882, DateTimeKind.Utc).AddTicks(4597),
                            InstrumentName = "Saxophone",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 882, DateTimeKind.Utc).AddTicks(4597)
                        });
                });

            modelBuilder.Entity("TeamFive.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("LessonTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("OnlineAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PricePerLesson")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LessonTypeId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("TeamFive.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("WillingToTravel")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 332, DateTimeKind.Utc).AddTicks(4116),
                            Description = "The First Student in Instrumental",
                            FirstName = "John",
                            LastName = "Doe",
                            Location = "Online",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 332, DateTimeKind.Utc).AddTicks(4120),
                            WillingToTravel = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 332, DateTimeKind.Utc).AddTicks(4127),
                            Description = "Second Student in DB",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Location = "Seattle, WA",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 332, DateTimeKind.Utc).AddTicks(4127),
                            WillingToTravel = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 332, DateTimeKind.Utc).AddTicks(4131),
                            Description = "When the student is truly ready, the teacher disappears.",
                            FirstName = "Eve",
                            LastName = "Davis",
                            Location = "Hidden Cave, Sacred Mountains",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 332, DateTimeKind.Utc).AddTicks(4131),
                            WillingToTravel = false
                        });
                });

            modelBuilder.Entity("TeamFive.Models.StudentLessonBooking", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BookingNotes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("LessonNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StudentId", "LessonId");

                    b.HasIndex("LessonId");

                    b.HasIndex("LessonNameId");

                    b.ToTable("StudentLessonBookings");
                });

            modelBuilder.Entity("TeamFive.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 886, DateTimeKind.Utc).AddTicks(9492),
                            Email = "a@email.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "AQAAAAIAAYagAAAAEOQvKnpQ6DB3FLn5xqTxr5KVMifwMJjcD22AWFqqWwomk4JlG0tNjHoXwXgU92Hm0Q==",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 886, DateTimeKind.Utc).AddTicks(9494)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 962, DateTimeKind.Utc).AddTicks(8775),
                            Email = "b@email.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "AQAAAAIAAYagAAAAEDZJNi2p7r82tMaEwWleSpDmXNhU7hEjSoW6uZ4UCycsC4BwedKgxCgaWHj9N0xkYQ==",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 26, 962, DateTimeKind.Utc).AddTicks(8781)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 41, DateTimeKind.Utc).AddTicks(3881),
                            Email = "c@email.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Password = "AQAAAAIAAYagAAAAEM8E6Eq8kX4H24eIkJ4N+Qlxv1ZBhMyXDzcfVhyfkhg5/966sZnAImzD0lE3DrOEOg==",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 41, DateTimeKind.Utc).AddTicks(3886)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 134, DateTimeKind.Utc).AddTicks(3662),
                            Email = "d@email.com",
                            FirstName = "Bob",
                            LastName = "Williams",
                            Password = "AQAAAAIAAYagAAAAEMdIclibb+QY40W3lc1D8BYCauNlBJSEtTnvmDZ9i20NTdH2yT9VEWv2KCctG3EApA==",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 134, DateTimeKind.Utc).AddTicks(3671)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 219, DateTimeKind.Utc).AddTicks(1296),
                            Email = "e@email.com",
                            FirstName = "Eve",
                            LastName = "Davis",
                            Password = "AQAAAAIAAYagAAAAENIfFi2ocmMZyRSi/g6qP/ukWzoRHwAJzlBfivGYnV4o07zKk5I+Zl8y3YataSyXrw==",
                            UpdatedAt = new DateTime(2023, 10, 8, 6, 47, 27, 219, DateTimeKind.Utc).AddTicks(1300)
                        });
                });

            modelBuilder.Entity("MyApp.Models.RefreshToken", b =>
                {
                    b.HasOne("TeamFive.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamFive.Models.Lesson", b =>
                {
                    b.HasOne("TeamFive.Models.Instructor", "LessonInstructor")
                        .WithMany("LessonCatalogue")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamFive.Models.Instrument", "LessonType")
                        .WithMany()
                        .HasForeignKey("LessonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonInstructor");

                    b.Navigation("LessonType");
                });

            modelBuilder.Entity("TeamFive.Models.StudentLessonBooking", b =>
                {
                    b.HasOne("TeamFive.Models.Lesson", "BookingLesson")
                        .WithMany("BookedStudents")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamFive.Models.Lesson", "LessonName")
                        .WithMany()
                        .HasForeignKey("LessonNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamFive.Models.Student", "BookingStudent")
                        .WithMany("BookedLessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingLesson");

                    b.Navigation("BookingStudent");

                    b.Navigation("LessonName");
                });

            modelBuilder.Entity("TeamFive.Models.Instructor", b =>
                {
                    b.Navigation("LessonCatalogue");
                });

            modelBuilder.Entity("TeamFive.Models.Lesson", b =>
                {
                    b.Navigation("BookedStudents");
                });

            modelBuilder.Entity("TeamFive.Models.Student", b =>
                {
                    b.Navigation("BookedLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
