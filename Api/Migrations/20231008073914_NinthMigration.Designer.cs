// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamFive.DataStorage;

#nullable disable

namespace TeamFive.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20231008073914_NinthMigration")]
    partial class NinthMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MyApp.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TeamFive.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AcceptingNewStudents")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InstructorAboutMe")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("WillingToTravel")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AcceptingNewStudents = true,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(5965),
                            InstructorAboutMe = "Best Floutist on the web",
                            Location = "Online",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(5965),
                            WillingToTravel = false,
                            YearsExperience = 3
                        },
                        new
                        {
                            Id = 4,
                            AcceptingNewStudents = false,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(5970),
                            InstructorAboutMe = "Teaching Guitar up and down the Coast.",
                            Location = "Sacremento, CA",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(5970),
                            WillingToTravel = true,
                            YearsExperience = 10
                        },
                        new
                        {
                            Id = 5,
                            AcceptingNewStudents = true,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(5971),
                            InstructorAboutMe = "When the student is ready, the teacher will appear.",
                            Location = "Hidden Cave, Sacred Mountains",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(5972),
                            WillingToTravel = false,
                            YearsExperience = 100
                        });
                });

            modelBuilder.Entity("TeamFive.Models.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Instruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "String Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 409, DateTimeKind.Utc).AddTicks(6228),
                            InstrumentName = "Acoustic Guitar",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 409, DateTimeKind.Utc).AddTicks(6231)
                        },
                        new
                        {
                            Id = 2,
                            Category = "String Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 409, DateTimeKind.Utc).AddTicks(6423),
                            InstrumentName = "Electric Guitar",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 409, DateTimeKind.Utc).AddTicks(6424)
                        },
                        new
                        {
                            Id = 3,
                            Category = "String Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 409, DateTimeKind.Utc).AddTicks(6440),
                            InstrumentName = "Violin",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 409, DateTimeKind.Utc).AddTicks(6440)
                        },
                        new
                        {
                            Id = 4,
                            Category = "Woodwind Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 409, DateTimeKind.Utc).AddTicks(6453),
                            InstrumentName = "Flute",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 409, DateTimeKind.Utc).AddTicks(6453)
                        },
                        new
                        {
                            Id = 5,
                            Category = "Woodwind Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 409, DateTimeKind.Utc).AddTicks(6484),
                            InstrumentName = "Clarinet",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 409, DateTimeKind.Utc).AddTicks(6484)
                        },
                        new
                        {
                            Id = 6,
                            Category = "Woodwind Instruments",
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 409, DateTimeKind.Utc).AddTicks(6503),
                            InstrumentName = "Saxophone",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 409, DateTimeKind.Utc).AddTicks(6503)
                        });
                });

            modelBuilder.Entity("TeamFive.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LessonTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("OnlineAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PricePerLesson")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LessonTypeId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(6045),
                            Description = "First Lesson: $50 per lesson",
                            InstructorId = 3,
                            LessonName = "Beginner Guitar",
                            LessonTypeId = 1,
                            OnlineAvailable = true,
                            PricePerLesson = 50,
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(6046)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(6051),
                            Description = "Second Lesson: $100 per lesson",
                            InstructorId = 3,
                            LessonName = "Intermediate Electric Guitar",
                            LessonTypeId = 2,
                            OnlineAvailable = false,
                            PricePerLesson = 100,
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(6051)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(6054),
                            Description = "Third Lesson: $150 per lesson",
                            InstructorId = 4,
                            LessonName = "Beginner Violin",
                            LessonTypeId = 3,
                            OnlineAvailable = true,
                            PricePerLesson = 150,
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(6054)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(6057),
                            Description = "Fourth Lesson: $200 per lesson",
                            InstructorId = 4,
                            LessonName = "Expert Flute",
                            LessonTypeId = 4,
                            OnlineAvailable = false,
                            PricePerLesson = 200,
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(6057)
                        });
                });

            modelBuilder.Entity("TeamFive.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("WillingToTravel")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(5913),
                            Description = "The First Student in Instrumental",
                            FirstName = "John",
                            LastName = "Doe",
                            Location = "Online",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(5917),
                            WillingToTravel = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(5924),
                            Description = "Second Student in DB",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Location = "Seattle, WA",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(5924),
                            WillingToTravel = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(5926),
                            Description = "When the student is truly ready, the teacher disappears.",
                            FirstName = "Eve",
                            LastName = "Davis",
                            Location = "Hidden Cave, Sacred Mountains",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(5927),
                            WillingToTravel = false
                        });
                });

            modelBuilder.Entity("TeamFive.Models.StudentLessonBooking", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BookingNotes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StudentId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("StudentLessonBookings");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            LessonId = 1,
                            BookingDate = new DateTime(2023, 10, 8, 0, 39, 13, 837, DateTimeKind.Local).AddTicks(6104),
                            BookingNotes = "Notes for the first Booking",
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(6094),
                            Id = 1,
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(6095)
                        },
                        new
                        {
                            StudentId = 2,
                            LessonId = 3,
                            BookingDate = new DateTime(2023, 10, 8, 0, 39, 13, 837, DateTimeKind.Local).AddTicks(6186),
                            BookingNotes = "Notes for the second Booking",
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(6184),
                            Id = 1,
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 837, DateTimeKind.Utc).AddTicks(6185)
                        });
                });

            modelBuilder.Entity("TeamFive.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 415, DateTimeKind.Utc).AddTicks(5276),
                            Email = "a@email.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "AQAAAAIAAYagAAAAEKEnvwPZoQiLUuWOzzS+S57E3zxE8wbLQJ8cdC6PojR6V75re9Eosw1Vpm22XXYyJQ==",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 415, DateTimeKind.Utc).AddTicks(5281)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 491, DateTimeKind.Utc).AddTicks(6136),
                            Email = "b@email.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "AQAAAAIAAYagAAAAEMnZI3nxZXVBpJWuOdiGEgfI/hrYfC/Pwtaxyc68JGEjbUh+0rYY5TLpNKyGBhzl0Q==",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 491, DateTimeKind.Utc).AddTicks(6144)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 572, DateTimeKind.Utc).AddTicks(5638),
                            Email = "c@email.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Password = "AQAAAAIAAYagAAAAEDi/PytRqjZNhHywmPXJhSNcCw7dN6QQWPnuD3K+w/zI66SgbPDMnQvpguyCR86+gA==",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 572, DateTimeKind.Utc).AddTicks(5643)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 650, DateTimeKind.Utc).AddTicks(712),
                            Email = "d@email.com",
                            FirstName = "Bob",
                            LastName = "Williams",
                            Password = "AQAAAAIAAYagAAAAEMAs0fG16m8SC/aRhSermx+gxoKHEIxTxjKLsX1K0aRxv6cHWdPR4Y/e099sDUNrvg==",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 650, DateTimeKind.Utc).AddTicks(717)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 744, DateTimeKind.Utc).AddTicks(6068),
                            Email = "e@email.com",
                            FirstName = "Eve",
                            LastName = "Davis",
                            Password = "AQAAAAIAAYagAAAAENJ+6DEIFtSf65/ijpIffATpF8SRn0vp3IvW3zpn7RdIkmnM8HqjTxmlZ1b/MNlpPA==",
                            UpdatedAt = new DateTime(2023, 10, 8, 7, 39, 13, 744, DateTimeKind.Utc).AddTicks(6072)
                        });
                });

            modelBuilder.Entity("MyApp.Models.RefreshToken", b =>
                {
                    b.HasOne("TeamFive.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamFive.Models.Lesson", b =>
                {
                    b.HasOne("TeamFive.Models.Instructor", "LessonInstructor")
                        .WithMany("LessonCatalogue")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamFive.Models.Instrument", "LessonType")
                        .WithMany()
                        .HasForeignKey("LessonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonInstructor");

                    b.Navigation("LessonType");
                });

            modelBuilder.Entity("TeamFive.Models.StudentLessonBooking", b =>
                {
                    b.HasOne("TeamFive.Models.Lesson", "BookingLesson")
                        .WithMany("BookedStudents")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamFive.Models.Student", "BookingStudent")
                        .WithMany("BookedLessons")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingLesson");

                    b.Navigation("BookingStudent");
                });

            modelBuilder.Entity("TeamFive.Models.Instructor", b =>
                {
                    b.Navigation("LessonCatalogue");
                });

            modelBuilder.Entity("TeamFive.Models.Lesson", b =>
                {
                    b.Navigation("BookedStudents");
                });

            modelBuilder.Entity("TeamFive.Models.Student", b =>
                {
                    b.Navigation("BookedLessons");
                });
#pragma warning restore 612, 618
        }
    }
}
